name: test
on: [push]

env:
  TAG_PREFIX: artifactory.hashicorp.engineering/actions-docker-build/test

jobs:

  bats-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Install BATS
        env:
          BATS_VERSION: 1.5.0
          BATS_REPO: https://github.com/bats-core/bats-core
          BATS_PATH: /usr/local/bats
        run: |
          sudo git clone --depth 1 --branch v$BATS_VERSION $BATS_REPO $BATS_PATH
          echo $BATS_PATH/bin >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Run BATS tests
        run: make test

  # The action we're testing expects to download an artifact,
  # so here we upload it in preperation.
  action-test-prep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2 
      - name: Zip Test Bin
        run: |
          zip ./testdata/test_bin.zip ./testdata/test_bin
      - name: Upload a test artifact.
        uses: actions/upload-artifact@v2
        with:
          path: testdata/test_bin.zip
          name: test_bin.zip


  action-test-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Each include is a test case.
        include:
          - name: dockerfile-in-root
            setup: |
              mv testdata/Dockerfile ./
              ls -lah
            num_prod_tags: 2
            num_dev_tags: 0
            dockerfile:
            workdir:
          - name: setting-dockerfile
            setup:
            num_prod_tags: 2
            num_dev_tags: 0
            dockerfile: testdata/Dockerfile
            workdir:
          - name: setting-workdir
            setup:
            num_prod_tags: 2
            num_dev_tags: 0
            dockerfile:
            workdir: testdata
    env:
      OVERRIDE_TARBALL_NAME: ${{matrix.name}}.docker.tar
      OVERRIDE_DEV_TARBALL_NAME: ${{matrix.name}}.docker.dev.tar
      TAG_PREFIX: artifactory.hashicorp.engineering/actions-docker-build/test
    needs:
      - action-test-prep
    steps:
      - name: Checkout
        uses: actions/checkout@v2 
      - name: Test Setup
        shell: bash
        run: |
          ${{matrix.setup}}
      - name: Set TAGS, DEV_TAGS, TAGS_ONELINE and DEV_TAGS_ONELINE.
        shell: bash
        run: | 
          save_tags_to_docker_env() { varname="$1"; numtags="$2";
            ONELINE=""
            echo "${varname}<<EOF" >> "$GITHUB_ENV"
            for ((i=0; i<numtags; i++)); do
                T="${{env.TAG_PREFIX}}/${{matrix.name}}:tag$i"
                echo "$T" >> "$GITHUB_ENV"
                ONELINE+="$T "
            done
            echo "EOF" >> "$GITHUB_ENV"
            echo "${varname}_ONELINE=$ONELINE" >> "$GITHUB_ENV"
          }

          save_tags_to_docker_env TAGS     ${{matrix.num_prod_tags}}
          save_tags_to_docker_env DEV_TAGS ${{matrix.num_dev_tags}}
          
      - name: Invoke the Action under test
        uses: ./
        with:
          version: 1.0.0
          target: default
          arch: amd64
          tags: |
            ${{env.TAGS}}
          dev_tags: |
            ${{env.DEV_TAGS}}
          zip_artifact_name: test_bin.zip
          bin_name: test_bin
          dockerfile: ${{matrix.dockerfile}}

      - name: Assert prod tarball contains prod tags
        run: |
          source ./scripts/assertions.bash 
          assert_tarball_contains_tags \
            "${{env.OVERRIDE_TARBALL_NAME}}" \
            ${{env.TAGS_ONELINE}}

      - name: Assert dev tarball contains dev tags
        if: ${{env.num_dev_tags != 0}}
        run: |
          source ./scripts/assertions.bash 
          assert_tarball_contains_tags \
            "${{env.OVERRIDE_DEV_TARBALL_NAME}}" \
            ${{env.DEV_TAGS_ONELINE}}
